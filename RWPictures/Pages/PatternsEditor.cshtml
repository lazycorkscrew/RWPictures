@using RWPictures.Entities;
@using RWPictures.PL;
@{
    Layout = "~/Layouts/_MainLayout.cshtml";

    string pattern = Request["pattern"];
    User user = Session["user"] as User;

    if (user != null && user.Rights >= 2)
    {
        if (!string.IsNullOrEmpty(pattern))
        {
            string act = Request["act"];
            if (!string.IsNullOrEmpty(act))
            {
                switch (act)
                {
                    case "add_field":
                        {
                            string fieldName = Request["field_name"];
                            if (string.IsNullOrEmpty(fieldName) || !LogicProvider.Logic.AddFieldToPattern(pattern, fieldName))
                            {
                            <div>Что-то пошло не так с добавлением поля шаблона.</div>
                            }

                            break;
                        }

                    case "remove_field":
                        {
                            if (!int.TryParse(Request["id"], out int id) || !LogicProvider.Logic.RemovePatternField(pattern, id))
                            {
                            <div>Что-то пошло не так с удалением поля шаблона.</div>
                            }

                            break;
                        }
                    case "remove_pattern":
                        {
                            if (!LogicProvider.Logic.RemovePattern(pattern))
                            {
                            <div>Что-то пошло не так с удалением шаблона.</div>
                            }
                            else
                            {
                                Response.Redirect("~/Pages/PatternsEditor.cshtml");
                            }
                            break;
                        }


                    default: break;
                }
            }

            Dictionary<int, string> fields = LogicProvider.Logic.GetPatternFields(pattern);

            foreach (KeyValuePair<int, string> field in fields)
            {
            <p>@field.Value <a href="~/Pages/PatternsEditor.cshtml?pattern=@pattern&act=remove_field&id=@field.Key">Удалить</a></p>
            }
        <form action="~/Pages/PatternsEditor.cshtml?act=add_field" method="post">
            <input type="text" name="field_name" />
            <input type="hidden" name="pattern" value="@pattern" />
            <button>Добавить</button>
        </form>

        }
        else
        {

            string[] patterns = LogicProvider.Logic.GetAllPatterns().ToArray();

        <div class="auth_page" >
            <div>
                @for (int i = 0; i < patterns.Length; i++)
                {
                    <div>
                        <a href="~/Pages/PatternsEditor.cshtml?pattern=@patterns[i]">@patterns[i]</a>
                        <a href="~/Pages/PatternsEditor.cshtml?act=remove_pattern&pattern=@patterns[i]">Удалить</a>
                    </div>
                }
                <form action="~/Pages/PatternsEditor.cshtml" method="post">
                    <input type="text" name="pattern" />
                    <button>Добавить шаблон</button>
                </form>
            </div>
        </div>
        }
    }
    else
    {
        Response.Redirect("~/Pages/HaveNotPermission.cshtml");
    }
}